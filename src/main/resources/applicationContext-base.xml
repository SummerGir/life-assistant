<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <!--扫描包-->
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <!--<context:annotation-config/>-->
    <context:component-scan base-package="com"></context:component-scan>

    <bean id="applicationSettings"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="fileStorage">fileStorage</prop>
            </props>
        </property>
    </bean>

    <!--数据库连接的资源文件-->
    <context:property-placeholder ignore-resource-not-found="true" location="classpath:database.properties" system-properties-mode="OVERRIDE"/>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"
          primary="true">
        <property name="driverClassName" value="${database.driverClass}"/>
        <property name="url" value="${database.jdbcUrl}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
        <property name="defaultAutoCommit" value="false"/>
        <property name="dbType" value="${database.type}"/>
        <property name="connectProperties">
            <props>
                <prop key="remarks">true</prop>
            </props>
        </property>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>

        <!-- MySQL 配置 start -->
        <!--验证 sql 语句 -->
        <property name="validationQuery" value="SELECT 'x'"/>
        <!-- 关闭 PSCache -->
        <property name="poolPreparedStatements" value="false"/>
        <!-- MySQL 配置 end -->

        <!-- Oracle 配置 start -->
        <!--<property name="validationQuery" value="SELECT 'x' FROM DUAL"/>-->
        <!-- 打开 PSCache -->
        <!--<property name="poolPreparedStatements" value="true"/>-->
        <!-- 指定每个连接上PSCache的大小 -->
        <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>-->
        <!-- Oracle 配置 end -->

        <!-- 配置监控统计拦截的filters -->
        <!--wall:防御SQL注入攻击,stat:监控统计,slf4j:日志记录,mergeStat:监控统计合并SQL-->
        <!--<property name="filters" value="wall,mergeStat,slf4j"/>-->
        <property name="proxyFilters">
            <list>
                <bean class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="slowSqlMillis" value="2000"/>
                    <property name="logSlowSql" value="true"/>
                    <property name="dbType" value="${database.type}"/>
                    <property name="mergeSql" value="true"/>
                </bean>
                <bean class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
                    <property name="statementLogEnabled" value="false"/>
                    <property name="statementExecutableSqlLogEnable" value="true"/>
                </bean>
                <bean class="com.alibaba.druid.wall.WallFilter">
                    <property name="dbType" value="${database.type}"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- Spring整合JPA  配置EntityManagerFactory-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="${hibernate.dialect}"/>
            </bean>
        </property>
        <property name="packagesToScan" value="com"/>


    </bean>

    <!-- 配置Hibernate的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>



    <!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
    <jpa:repositories base-package="com.**.dao"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"/>


    <!-- 使用annotation定义事务 -->
    <!--<tx:annotation-driven/>-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>
